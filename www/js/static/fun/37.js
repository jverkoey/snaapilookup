var i=37;var d=new Array({i:1,n:"(* )",h:2},{i:2,n:"(* x)",h:2},{i:3,n:"(* x y)",h:2},{i:4,n:"(* x y & more)",h:2},{i:5,n:"*1",h:2},{i:6,n:"*2",h:2},{i:7,n:"*3",h:2},{i:8,n:"*agent*",h:2},{i:9,n:"*command-line-args*",h:2},{i:10,n:"*compile-files*",h:2},{i:11,n:"*compile-path*",h:2},{i:12,n:"*e",h:2},{i:13,n:"*err*",h:2},{i:14,n:"*file*",h:2},{i:15,n:"*flush-on-newline*",h:2},{i:16,n:"*in*",h:2},{i:17,n:"*ns*",h:2},{i:18,n:"*out*",h:2},{i:19,n:"*print-dup*",h:2},{i:20,n:"*print-length*",h:2},{i:21,n:"*print-level*",h:2},{i:22,n:"*print-meta*",h:2},{i:23,n:"*print-readably*",h:2},{i:24,n:"*warn-on-reflection*",h:2},{i:25,n:"(+ )",h:2},{i:26,n:"(+ x)",h:2},{i:27,n:"(+ x y)",h:2},{i:28,n:"(+ x y & more)",h:2},{i:29,n:"(- x)",h:2},{i:30,n:"(- x y)",h:2},{i:31,n:"(- x y & more)",h:2},{i:32,n:"(-&gt; x form)",h:2},{i:33,n:"(-&gt; x form & more)",h:2},{i:34,n:"(.. x form)",h:2},{i:35,n:"(.. x form & more)",h:2},{i:36,n:"(\/ x)",h:2},{i:37,n:"(\/ x y)",h:2},{i:38,n:"(\/ x y & more)",h:2},{i:39,n:"(&lt; x)",h:2},{i:40,n:"(&lt; x y)",h:2},{i:41,n:"(&lt; x y & more)",h:2},{i:42,n:"(&lt;= x)",h:2},{i:43,n:"(&lt;= x y)",h:2},{i:44,n:"(&lt;= x y & more)",h:2},{i:45,n:"(= x)",h:2},{i:46,n:"(= x y)",h:2},{i:47,n:"(= x y & more)",h:2},{i:48,n:"(== x)",h:2},{i:49,n:"(== x y)",h:2},{i:50,n:"(== x y & more)",h:2},{i:51,n:"(&gt; x)",h:2},{i:52,n:"(&gt; x y)",h:2},{i:53,n:"(&gt; x y & more)",h:2},{i:54,n:"(&gt;= x)",h:2},{i:55,n:"(&gt;= x y)",h:2},{i:56,n:"(&gt;= x y & more)",h:2},{i:57,n:"(accessor s key)",h:2},{i:58,n:"(aclone array)",h:2},{i:59,n:"(add-classpath url)",h:2},{i:60,n:"(add-watch reference key fn)",h:2},{i:61,n:"(add-watcher reference send-type watcher-agent action-fn)",h:2},{i:62,n:"(agent state)",h:2},{i:63,n:"(agent state & options)",h:2},{i:64,n:"(agent-errors a)",h:2},{i:65,n:"(aget array idx)",h:2},{i:66,n:"(aget array idx & idxs)",h:2},{i:67,n:"(alength array)",h:2},{i:68,n:"(alias alias namespace-sym)",h:2},{i:69,n:"(all-ns )",h:2},{i:70,n:"(alter ref fun & args)",h:2},{i:71,n:"(alter-meta! iref f & args)",h:2},{i:72,n:"(alter-var-root v f & args)",h:2},{i:73,n:"(amap a idx ret expr)",h:2},{i:74,n:"(ancestors tag)",h:2},{i:75,n:"(ancestors h tag)",h:2},{i:76,n:"(and )",h:2},{i:77,n:"(and x)",h:2},{i:78,n:"(and x & next)",h:2},{i:79,n:"(apply f args* argseq)",h:2},{i:80,n:"(areduce a idx ret init expr)",h:2},{i:81,n:"(array-map )",h:2},{i:82,n:"(array-map & keyvals)",h:2},{i:83,n:"(aset array idx val)",h:2},{i:84,n:"(aset array idx idx2 & idxv)",h:2},{i:85,n:"(aset-boolean array idx val)",h:2},{i:86,n:"(aset-boolean array idx idx2 & idxv)",h:2},{i:87,n:"(aset-byte array idx val)",h:2},{i:88,n:"(aset-byte array idx idx2 & idxv)",h:2},{i:89,n:"(aset-char array idx val)",h:2},{i:90,n:"(aset-char array idx idx2 & idxv)",h:2},{i:91,n:"(aset-double array idx val)",h:2},{i:92,n:"(aset-double array idx idx2 & idxv)",h:2},{i:93,n:"(aset-float array idx val)",h:2},{i:94,n:"(aset-float array idx idx2 & idxv)",h:2},{i:95,n:"(aset-int array idx val)",h:2},{i:96,n:"(aset-int array idx idx2 & idxv)",h:2},{i:97,n:"(aset-long array idx val)",h:2},{i:98,n:"(aset-long array idx idx2 & idxv)",h:2},{i:99,n:"(aset-short array idx val)",h:2},{i:100,n:"(aset-short array idx idx2 & idxv)",h:2},{i:101,n:"(assert x)",h:2},{i:102,n:"(assoc map key val)",h:2},{i:103,n:"(assoc map key val & kvs)",h:2},{i:104,n:"(assoc-in m [k & ks] v)",h:2},{i:105,n:"(associative? coll)",h:2},{i:106,n:"(atom x)",h:2},{i:107,n:"(atom x & options)",h:2},{i:108,n:"(await & agents)",h:2},{i:109,n:"(await-for timeout-ms & agents)",h:2},{i:110,n:"(bases c)",h:2},{i:111,n:"(bean x)",h:2},{i:112,n:"(bigdec x)",h:2},{i:113,n:"(bigint x)",h:2},{i:114,n:"(binding bindings & body)",h:2},{i:115,n:"(bit-and x y)",h:2},{i:116,n:"(bit-and-not x y)",h:2},{i:117,n:"(bit-clear x n)",h:2},{i:118,n:"(bit-flip x n)",h:2},{i:119,n:"(bit-not x)",h:2},{i:120,n:"(bit-or x y)",h:2},{i:121,n:"(bit-set x n)",h:2},{i:122,n:"(bit-shift-left x n)",h:2},{i:123,n:"(bit-shift-right x n)",h:2},{i:124,n:"(bit-test x n)",h:2},{i:125,n:"(bit-xor x y)",h:2},{i:126,n:"(boolean x)",h:2},{i:127,n:"(butlast coll)",h:2},{i:128,n:"(byte x)",h:2},{i:129,n:"(cast c x)",h:2},{i:130,n:"(char x)",h:2},{i:131,n:"char-escape-string",h:2},{i:132,n:"char-name-string",h:2},{i:133,n:"(class x)",h:2},{i:134,n:"(class? x)",h:2},{i:135,n:"(clear-agent-errors a)",h:2},{i:136,n:"(coll? x)",h:2},{i:137,n:"(comment & body)",h:2},{i:138,n:"(commute ref fun & args)",h:2},{i:139,n:"(comp & fs)",h:2},{i:140,n:"(comparator pred)",h:2},{i:141,n:"(compare x y)",h:2},{i:142,n:"(compare-and-set! atom oldval newval)",h:2},{i:143,n:"(compile lib)",h:2},{i:144,n:"(complement f)",h:2},{i:145,n:"(concat )",h:2},{i:146,n:"(concat x)",h:2},{i:147,n:"(concat x y)",h:2},{i:148,n:"(concat x y & zs)",h:2},{i:149,n:"(cond & clauses)",h:2},{i:150,n:"(condp pred expr & clauses)",h:2},{i:151,n:"(conj coll x)",h:2},{i:152,n:"(conj coll x & xs)",h:2},{i:153,n:"(cons x seq)",h:2},{i:154,n:"(constantly x)",h:2},{i:155,n:"(construct-proxy c & ctor-args)",h:2},{i:156,n:"(contains? coll key)",h:2},{i:157,n:"(count coll)",h:2},{i:158,n:"(counted? coll)",h:2},{i:159,n:"(create-ns sym)",h:2},{i:160,n:"(create-struct & keys)",h:2},{i:161,n:"(cycle coll)",h:2},{i:162,n:"(dec x)",h:2},{i:163,n:"(decimal? n)",h:2},{i:164,n:"(declare & names)",h:2},{i:165,n:"(definline name & decl)",h:2},{i:166,n:"(defmacro name doc-string? attr-map? [params*] body)",h:2},{i:167,n:"(defmacro name doc-string? attr-map? ([params*] body) + attr-map?)",h:2},{i:168,n:"(defmethod multifn dispatch-val & fn-tail)",h:2},{i:169,n:"(defmulti name docstring? attr-map? dispatch-fn & options)",h:2},{i:170,n:"(defn name doc-string? attr-map? [params*] body)",h:2},{i:171,n:"(defn name doc-string? attr-map? ([params*] body) + attr-map?)",h:2},{i:172,n:"(defn- name & decls)",h:2},{i:173,n:"(defonce name expr)",h:2},{i:174,n:"(defstruct name & keys)",h:2},{i:175,n:"(delay & body)",h:2},{i:176,n:"(delay? x)",h:2},{i:177,n:"(deref ref)",h:2},{i:178,n:"(derive tag parent)",h:2},{i:179,n:"(derive h tag parent)",h:2},{i:180,n:"(descendants tag)",h:2},{i:181,n:"(descendants h tag)",h:2},{i:182,n:"(disj set)",h:2},{i:183,n:"(disj set key)",h:2},{i:184,n:"(disj set key & ks)",h:2},{i:185,n:"(dissoc map)",h:2},{i:186,n:"(dissoc map key)",h:2},{i:187,n:"(dissoc map key & ks)",h:2},{i:188,n:"(distinct coll)",h:2},{i:189,n:"(distinct? x)",h:2},{i:190,n:"(distinct? x y)",h:2},{i:191,n:"(distinct? x y & more)",h:2},{i:192,n:"(doall coll)",h:2},{i:193,n:"(doall n coll)",h:2},{i:194,n:"(doc name)",h:2},{i:195,n:"(dorun coll)",h:2},{i:196,n:"(dorun n coll)",h:2},{i:197,n:"(doseq seq-exprs & body)",h:2},{i:198,n:"(dosync & exprs)",h:2},{i:199,n:"(dotimes bindings & body)",h:2},{i:200,n:"(doto x & forms)",h:2},{i:201,n:"(double x)",h:2},{i:202,n:"(double-array size-or-seq)",h:2},{i:203,n:"(double-array size init-val-or-seq)",h:2},{i:204,n:"(doubles xs)",h:2},{i:205,n:"(drop n coll)",h:2},{i:206,n:"(drop-last s)",h:2},{i:207,n:"(drop-last n s)",h:2},{i:208,n:"(drop-while pred coll)",h:2},{i:209,n:"(empty coll)",h:2},{i:210,n:"(empty? coll)",h:2},{i:211,n:"(ensure ref)",h:2},{i:212,n:"(enumeration-seq e)",h:2},{i:213,n:"(eval form)",h:2},{i:214,n:"(even? n)",h:2},{i:215,n:"(every? pred coll)",h:2},{i:216,n:"(false? x)",h:2},{i:217,n:"(ffirst x)",h:2},{i:218,n:"(file-seq dir)",h:2},{i:219,n:"(filter pred coll)",h:2},{i:220,n:"(find map key)",h:2},{i:221,n:"(find-doc re-string-or-pattern)",h:2},{i:222,n:"(find-ns sym)",h:2},{i:223,n:"(find-var sym)",h:2},{i:224,n:"(first coll)",h:2},{i:225,n:"(float x)",h:2},{i:226,n:"(float-array size-or-seq)",h:2},{i:227,n:"(float-array size init-val-or-seq)",h:2},{i:228,n:"(float? n)",h:2},{i:229,n:"(floats xs)",h:2},{i:230,n:"(flush )",h:2},{i:231,n:"(fn & sigs)",h:2},{i:232,n:"(fn? x)",h:2},{i:233,n:"(fnext x)",h:2},{i:234,n:"(for seq-exprs body-expr)",h:2},{i:235,n:"(force x)",h:2},{i:236,n:"(format fmt & args)",h:2},{i:237,n:"(future & body)",h:2},{i:238,n:"(future-call f)",h:2},{i:239,n:"(gen-class & options)",h:2},{i:240,n:"(gen-interface & options)",h:2},{i:241,n:"(gensym )",h:2},{i:242,n:"(gensym prefix-string)",h:2},{i:243,n:"(get map key)",h:2},{i:244,n:"(get map key not-found)",h:2},{i:245,n:"(get-in m ks)",h:2},{i:246,n:"(get-proxy-class & bases)",h:2},{i:247,n:"(get-validator iref)",h:2},{i:248,n:"(hash x)",h:2},{i:249,n:"(hash-map )",h:2},{i:250,n:"(hash-map & keyvals)",h:2},{i:251,n:"(hash-set )",h:2},{i:252,n:"(hash-set & keys)",h:2},{i:253,n:"(identical? x y)",h:2},{i:254,n:"(identity x)",h:2},{i:255,n:"(if-let bindings then)",h:2},{i:256,n:"(if-let bindings then else & oldform)",h:2},{i:257,n:"(if-not test then)",h:2},{i:258,n:"(if-not test then else)",h:2},{i:259,n:"(ifn? x)",h:2},{i:260,n:"(import & import-symbols-or-lists)",h:2},{i:261,n:"(in-ns name)",h:2},{i:262,n:"(inc x)",h:2},{i:263,n:"(init-proxy proxy mappings)",h:2},{i:264,n:"(instance? c x)",h:2},{i:265,n:"(int x)",h:2},{i:266,n:"(int-array size-or-seq)",h:2},{i:267,n:"(int-array size init-val-or-seq)",h:2},{i:268,n:"(integer? n)",h:2},{i:269,n:"(interleave & colls)",h:2},{i:270,n:"(intern ns name)",h:2},{i:271,n:"(intern ns name val)",h:2},{i:272,n:"(interpose sep coll)",h:2},{i:273,n:"(into to from)",h:2},{i:274,n:"(into-array aseq)",h:2},{i:275,n:"(into-array type aseq)",h:2},{i:276,n:"(ints xs)",h:2},{i:277,n:"(io! & body)",h:2},{i:278,n:"(isa? child parent)",h:2},{i:279,n:"(isa? h child parent)",h:2},{i:280,n:"(iterate f x)",h:2},{i:281,n:"(iterator-seq iter)",h:2},{i:282,n:"(key e)",h:2},{i:283,n:"(keys map)",h:2},{i:284,n:"(keyword name)",h:2},{i:285,n:"(keyword ns name)",h:2},{i:286,n:"(keyword? x)",h:2},{i:287,n:"(last coll)",h:2},{i:288,n:"(lazy-cat & colls)",h:2},{i:289,n:"(lazy-seq & body)",h:2},{i:290,n:"(let bindings & body)",h:2},{i:291,n:"(letfn fnspecs & body)",h:2},{i:292,n:"(line-seq rdr)",h:2},{i:293,n:"(list & items)",h:2},{i:294,n:"(list* item & more)",h:2},{i:295,n:"(list? x)",h:2},{i:296,n:"(load & paths)",h:2},{i:297,n:"(load-file name)",h:2},{i:298,n:"(load-reader rdr)",h:2},{i:299,n:"(load-string s)",h:2},{i:300,n:"(loaded-libs )",h:2},{i:301,n:"(locking x & body)",h:2},{i:302,n:"(long x)",h:2},{i:303,n:"(long-array size-or-seq)",h:2},{i:304,n:"(long-array size init-val-or-seq)",h:2},{i:305,n:"(longs xs)",h:2},{i:306,n:"(loop bindings & body)",h:2},{i:307,n:"(macroexpand form)",h:2},{i:308,n:"(macroexpand-1 form)",h:2},{i:309,n:"(make-array type len)",h:2},{i:310,n:"(make-array type dim & more-dims)",h:2},{i:311,n:"(make-hierarchy )",h:2},{i:312,n:"(map f coll)",h:2},{i:313,n:"(map f c1 c2)",h:2},{i:314,n:"(map f c1 c2 c3)",h:2},{i:315,n:"(map f c1 c2 c3 & colls)",h:2},{i:316,n:"(map? x)",h:2},{i:317,n:"(mapcat f & colls)",h:2},{i:318,n:"(max x)",h:2},{i:319,n:"(max x y)",h:2},{i:320,n:"(max x y & more)",h:2},{i:321,n:"(max-key k x)",h:2},{i:322,n:"(max-key k x y)",h:2},{i:323,n:"(max-key k x y & more)",h:2},{i:324,n:"(memfn name & args)",h:2},{i:325,n:"(memoize f)",h:2},{i:326,n:"(merge & maps)",h:2},{i:327,n:"(merge-with f & maps)",h:2},{i:328,n:"(meta obj)",h:2},{i:329,n:"(methods multifn)",h:2},{i:330,n:"(min x)",h:2},{i:331,n:"(min x y)",h:2},{i:332,n:"(min x y & more)",h:2},{i:333,n:"(min-key k x)",h:2},{i:334,n:"(min-key k x y)",h:2},{i:335,n:"(min-key k x y & more)",h:2},{i:336,n:"(mod num div)",h:2},{i:337,n:"(name x)",h:2},{i:338,n:"(namespace x)",h:2},{i:339,n:"(neg? x)",h:2},{i:340,n:"(newline )",h:2},{i:341,n:"(next coll)",h:2},{i:342,n:"(nfirst x)",h:2},{i:343,n:"(nil? x)",h:2},{i:344,n:"(nnext x)",h:2},{i:345,n:"(not x)",h:2},{i:346,n:"(not-any? pred coll)",h:2},{i:347,n:"(not-empty coll)",h:2},{i:348,n:"(not-every? pred coll)",h:2},{i:349,n:"(not= x)",h:2},{i:350,n:"(not= x y)",h:2},{i:351,n:"(not= x y & more)",h:2},{i:352,n:"(ns name & references)",h:2},{i:353,n:"(ns-aliases ns)",h:2},{i:354,n:"(ns-imports ns)",h:2},{i:355,n:"(ns-interns ns)",h:2},{i:356,n:"(ns-map ns)",h:2},{i:357,n:"(ns-name ns)",h:2},{i:358,n:"(ns-publics ns)",h:2},{i:359,n:"(ns-refers ns)",h:2},{i:360,n:"(ns-resolve ns sym)",h:2},{i:361,n:"(ns-unalias ns sym)",h:2},{i:362,n:"(ns-unmap ns sym)",h:2},{i:363,n:"(nth coll index)",h:2},{i:364,n:"(nth coll index not-found)",h:2},{i:365,n:"(nthnext coll n)",h:2},{i:366,n:"(num x)",h:2},{i:367,n:"(number? x)",h:2},{i:368,n:"(odd? n)",h:2},{i:369,n:"(or )",h:2},{i:370,n:"(or x)",h:2},{i:371,n:"(or x & next)",h:2},{i:372,n:"(parents tag)",h:2},{i:373,n:"(parents h tag)",h:2},{i:374,n:"(partial f arg1)",h:2},{i:375,n:"(partial f arg1 arg2)",h:2},{i:376,n:"(partial f arg1 arg2 arg3)",h:2},{i:377,n:"(partial f arg1 arg2 arg3 & more)",h:2},{i:378,n:"(partition n coll)",h:2},{i:379,n:"(partition n step coll)",h:2},{i:380,n:"(pcalls & fns)",h:2},{i:381,n:"(peek coll)",h:2},{i:382,n:"(pmap f coll)",h:2},{i:383,n:"(pmap f coll & colls)",h:2},{i:384,n:"(pop coll)",h:2},{i:385,n:"(pos? x)",h:2},{i:386,n:"(pr )",h:2},{i:387,n:"(pr x)",h:2},{i:388,n:"(pr x & more)",h:2},{i:389,n:"(pr-str & xs)",h:2},{i:390,n:"(prefer-method multifn dispatch-val-x dispatch-val-y)",h:2},{i:391,n:"(prefers multifn)",h:2},{i:392,n:"(print & more)",h:2},{i:393,n:"(print-namespace-doc nspace)",h:2},{i:394,n:"(print-str & xs)",h:2},{i:395,n:"(printf fmt & args)",h:2},{i:396,n:"(println & more)",h:2},{i:397,n:"(println-str & xs)",h:2},{i:398,n:"(prn & more)",h:2},{i:399,n:"(prn-str & xs)",h:2},{i:400,n:"(proxy class-and-interfaces args & fs)",h:2},{i:401,n:"(proxy-mappings proxy)",h:2},{i:402,n:"(proxy-super meth & args)",h:2},{i:403,n:"(pvalues & exprs)",h:2},{i:404,n:"(quot num div)",h:2},{i:405,n:"(rand )",h:2},{i:406,n:"(rand n)",h:2},{i:407,n:"(rand-int n)",h:2},{i:408,n:"(range end)",h:2},{i:409,n:"(range start end)",h:2},{i:410,n:"(range start end step)",h:2},{i:411,n:"(ratio? n)",h:2},{i:412,n:"(rationalize num)",h:2},{i:413,n:"(re-find m)",h:2},{i:414,n:"(re-find re s)",h:2},{i:415,n:"(re-groups m)",h:2},{i:416,n:"(re-matcher re s)",h:2},{i:417,n:"(re-matches re s)",h:2},{i:418,n:"(re-pattern s)",h:2},{i:419,n:"(re-seq re s)",h:2},{i:420,n:"(read )",h:2},{i:421,n:"(read stream)",h:2},{i:422,n:"(read stream eof-error? eof-value)",h:2},{i:423,n:"(read stream eof-error? eof-value recursive?)",h:2},{i:424,n:"(read-line )",h:2},{i:425,n:"(read-string s)",h:2},{i:426,n:"(reduce f coll)",h:2},{i:427,n:"(reduce f val coll)",h:2},{i:428,n:"(ref x)",h:2},{i:429,n:"(ref x & options)",h:2},{i:430,n:"(ref-set ref val)",h:2},{i:431,n:"(refer ns-sym & filters)",h:2},{i:432,n:"(refer-clojure & filters)",h:2},{i:433,n:"(release-pending-sends )",h:2},{i:434,n:"(rem num div)",h:2},{i:435,n:"(remove pred coll)",h:2},{i:436,n:"(remove-method multifn dispatch-val)",h:2},{i:437,n:"(remove-ns sym)",h:2},{i:438,n:"(remove-watch reference key)",h:2},{i:439,n:"(remove-watcher reference watcher-agent)",h:2},{i:440,n:"(repeat x)",h:2},{i:441,n:"(repeat n x)",h:2},{i:442,n:"(repeatedly f)",h:2},{i:443,n:"(replace smap coll)",h:2},{i:444,n:"(replicate n x)",h:2},{i:445,n:"(require & args)",h:2},{i:446,n:"(reset! atom newval)",h:2},{i:447,n:"(reset-meta! iref metadata-map)",h:2},{i:448,n:"(resolve sym)",h:2},{i:449,n:"(rest coll)",h:2},{i:450,n:"(resultset-seq rs)",h:2},{i:451,n:"(reverse coll)",h:2},{i:452,n:"(reversible? coll)",h:2},{i:453,n:"(rseq rev)",h:2},{i:454,n:"(rsubseq sc test key)",h:2},{i:455,n:"(rsubseq sc start-test start-key end-test end-key)",h:2},{i:456,n:"(second x)",h:2},{i:457,n:"(select-keys map keyseq)",h:2},{i:458,n:"(send a f & args)",h:2},{i:459,n:"(send-off a f & args)",h:2},{i:460,n:"(seq coll)",h:2},{i:461,n:"(seq? x)",h:2},{i:462,n:"(seque s)",h:2},{i:463,n:"(seque n-or-q s)",h:2},{i:464,n:"(sequence coll)",h:2},{i:465,n:"(sequential? coll)",h:2},{i:466,n:"(set coll)",h:2},{i:467,n:"(set-validator! iref validator-fn)",h:2},{i:468,n:"(set? x)",h:2},{i:469,n:"(short x)",h:2},{i:470,n:"(shutdown-agents )",h:2},{i:471,n:"(slurp f)",h:2},{i:472,n:"(some pred coll)",h:2},{i:473,n:"(sort coll)",h:2},{i:474,n:"(sort comp coll)",h:2},{i:475,n:"(sort-by keyfn coll)",h:2},{i:476,n:"(sort-by keyfn comp coll)",h:2},{i:477,n:"(sorted-map & keyvals)",h:2},{i:478,n:"(sorted-map-by comparator & keyvals)",h:2},{i:479,n:"(sorted-set & keys)",h:2},{i:480,n:"(sorted? coll)",h:2},{i:481,n:"(special-form-anchor x)",h:2},{i:482,n:"(special-symbol? s)",h:2},{i:483,n:"(split-at n coll)",h:2},{i:484,n:"(split-with pred coll)",h:2},{i:485,n:"(str )",h:2},{i:486,n:"(str x)",h:2},{i:487,n:"(str x & ys)",h:2},{i:488,n:"(string? x)",h:2},{i:489,n:"(struct s & vals)",h:2},{i:490,n:"(struct-map s & inits)",h:2},{i:491,n:"(subs s start)",h:2},{i:492,n:"(subs s start end)",h:2},{i:493,n:"(subseq sc test key)",h:2},{i:494,n:"(subseq sc start-test start-key end-test end-key)",h:2},{i:495,n:"(subvec v start)",h:2},{i:496,n:"(subvec v start end)",h:2},{i:497,n:"(supers class)",h:2},{i:498,n:"(swap! atom f)",h:2},{i:499,n:"(swap! atom f x)",h:2},{i:500,n:"(swap! atom f x y)",h:2},{i:501,n:"(swap! atom f x y & args)",h:2},{i:502,n:"(symbol name)",h:2},{i:503,n:"(symbol ns name)",h:2},{i:504,n:"(symbol? x)",h:2},{i:505,n:"(sync flags-ignored-for-now & body)",h:2},{i:506,n:"(syntax-symbol-anchor x)",h:2},{i:507,n:"(take n coll)",h:2},{i:508,n:"(take-nth n coll)",h:2},{i:509,n:"(take-while pred coll)",h:2},{i:510,n:"(test v)",h:2},{i:511,n:"(the-ns x)",h:2},{i:512,n:"(time expr)",h:2},{i:513,n:"(to-array coll)",h:2},{i:514,n:"(to-array-2d coll)",h:2},{i:515,n:"(trampoline f)",h:2},{i:516,n:"(trampoline f & args)",h:2},{i:517,n:"(tree-seq branch? children root)",h:2},{i:518,n:"(true? x)",h:2},{i:519,n:"(type x)",h:2},{i:520,n:"(unchecked-add x y)",h:2},{i:521,n:"(unchecked-dec x)",h:2},{i:522,n:"(unchecked-divide x y)",h:2},{i:523,n:"(unchecked-inc x)",h:2},{i:524,n:"(unchecked-multiply x y)",h:2},{i:525,n:"(unchecked-negate x)",h:2},{i:526,n:"(unchecked-remainder x y)",h:2},{i:527,n:"(unchecked-subtract x y)",h:2},{i:528,n:"(underive tag parent)",h:2},{i:529,n:"(underive h tag parent)",h:2},{i:530,n:"(update-in m [k & ks] f & args)",h:2},{i:531,n:"(update-proxy proxy mappings)",h:2},{i:532,n:"(use & args)",h:2},{i:533,n:"(val e)",h:2},{i:534,n:"(vals map)",h:2},{i:535,n:"(var-get x)",h:2},{i:536,n:"(var-set x val)",h:2},{i:537,n:"(var? v)",h:2},{i:538,n:"(vary-meta obj f & args)",h:2},{i:539,n:"(vec coll)",h:2},{i:540,n:"(vector )",h:2},{i:541,n:"(vector & args)",h:2},{i:542,n:"(vector? x)",h:2},{i:543,n:"(when test & body)",h:2},{i:544,n:"(when-first bindings & body)",h:2},{i:545,n:"(when-let bindings & body)",h:2},{i:546,n:"(when-not test & body)",h:2},{i:547,n:"(while test & body)",h:2},{i:548,n:"(with-in-str s & body)",h:2},{i:549,n:"(with-local-vars name-vals-vec & body)",h:2},{i:550,n:"(with-meta obj m)",h:2},{i:551,n:"(with-open bindings & body)",h:2},{i:552,n:"(with-out-str & body)",h:2},{i:553,n:"(with-precision precision & exprs)",h:2},{i:554,n:"(xml-seq root)",h:2},{i:555,n:"(zero? x)",h:2},{i:556,n:"(zipmap keys vals)",h:2},{i:557,n:"(inspect x)",h:3},{i:558,n:"(inspect-table data)",h:3},{i:559,n:"(inspect-tree data)",h:3},{i:560,n:"(load-script path)",h:4},{i:561,n:"(main & args)",h:4},{i:562,n:"(repl & options)",h:4},{i:563,n:"(repl-caught e)",h:4},{i:564,n:"(repl-exception throwable)",h:4},{i:565,n:"(repl-prompt )",h:4},{i:566,n:"(repl-read request-prompt request-exit)",h:4},{i:567,n:"(skip-if-eol s)",h:4},{i:568,n:"(skip-whitespace s)",h:4},{i:569,n:"(with-bindings & body)",h:4},{i:570,n:"(pany coll)",h:5},{i:571,n:"(par coll)",h:5},{i:572,n:"(par coll & ops)",h:5},{i:573,n:"(pdistinct coll)",h:5},{i:574,n:"(pfilter-dupes coll)",h:5},{i:575,n:"(pfilter-nils coll)",h:5},{i:576,n:"(pmax coll)",h:5},{i:577,n:"(pmax coll comp)",h:5},{i:578,n:"(pmin coll)",h:5},{i:579,n:"(pmin coll comp)",h:5},{i:580,n:"(preduce f base coll)",h:5},{i:581,n:"(psort coll)",h:5},{i:582,n:"(psort coll comp)",h:5},{i:583,n:"(psummary coll)",h:5},{i:584,n:"(psummary coll comp)",h:5},{i:585,n:"(pvec pa)",h:5},{i:586,n:"(difference s1)",h:6},{i:587,n:"(difference s1 s2)",h:6},{i:588,n:"(difference s1 s2 & sets)",h:6},{i:589,n:"(index xrel ks)",h:6},{i:590,n:"(intersection s1)",h:6},{i:591,n:"(intersection s1 s2)",h:6},{i:592,n:"(intersection s1 s2 & sets)",h:6},{i:593,n:"(join xrel yrel)",h:6},{i:594,n:"(join xrel yrel km)",h:6},{i:595,n:"(map-invert m)",h:6},{i:596,n:"(project xrel ks)",h:6},{i:597,n:"(rename xrel kmap)",h:6},{i:598,n:"(rename-keys map kmap)",h:6},{i:599,n:"(select pred xset)",h:6},{i:600,n:"(union )",h:6},{i:601,n:"(union s1)",h:6},{i:602,n:"(union s1 s2)",h:6},{i:603,n:"(union s1 s2 & sets)",h:6},{i:604,n:"(parse s)",h:7},{i:605,n:"(parse s startparse)",h:7},{i:606,n:"(append-child loc item)",h:8},{i:607,n:"(branch? loc)",h:8},{i:608,n:"(children loc)",h:8},{i:609,n:"(down loc)",h:8},{i:610,n:"(edit loc f & args)",h:8},{i:611,n:"(end? loc)",h:8},{i:612,n:"(insert-child loc item)",h:8},{i:613,n:"(insert-left loc item)",h:8},{i:614,n:"(insert-right loc item)",h:8},{i:615,n:"(left loc)",h:8},{i:616,n:"(leftmost loc)",h:8},{i:617,n:"(lefts loc)",h:8},{i:618,n:"(make-node loc node children)",h:8},{i:619,n:"(next loc)",h:8},{i:620,n:"(node loc)",h:8},{i:621,n:"(path loc)",h:8},{i:622,n:"(prev loc)",h:8},{i:623,n:"(remove loc)",h:8},{i:624,n:"(replace loc node)",h:8},{i:625,n:"(right loc)",h:8},{i:626,n:"(rightmost loc)",h:8},{i:627,n:"(rights loc)",h:8},{i:628,n:"(root loc)",h:8},{i:629,n:"(seq-zip root)",h:8},{i:630,n:"(up loc)",h:8},{i:631,n:"(vector-zip root)",h:8},{i:632,n:"(xml-zip root)",h:8},{i:633,n:"(zipper branch? children make-node root)",h:8});Snap.Database.singleton.load_functions(i,d);